#!/usr/bin/python3

import os
import subprocess as sp
import shutil
from utils import History, Utilities
from config import *

import argparse
parser = argparse.ArgumentParser(description='Add some integers.')
parser.add_argument('install', help='list of apps to install')
parser.add_argument('--zig', action='store_true',
                    help='install zig')
parser.add_argument('--zig-dev', action='store_true',
                    help='install zig dev')
parser.add_argument('--node', action='store_true',
                    help='install node')
parser.add_argument('--rust', action='store_true',
                    help='install rust')
parser.add_argument('--zls', action='store_true',
                    help='install zls')
parser.add_argument('--all', action='store_true',
                    help='install all')

args = parser.parse_args()

download_history = History()
utilities = Utilities(download_history)

class NodeInstaller():
    @staticmethod
    def install():
        NodeInstaller.__install_nvm()

    @staticmethod
    def __install_nvm():
        utilities.download_and_execute(f"https://raw.githubusercontent.com/nvm-sh/nvm/v{NVM_VERSION}/install.sh", "bash")

class RustInstaller():
    @staticmethod
    def install():
        """
        Install rust
        """
        filename = "rustup-init.sh"
        utilities.download_file("https://sh.rustup.rs", filename)
        sp.call(f"bash {filename}".split())

class ZigInstaller():
    @staticmethod
    def install(dev: bool=False):
        """
        Install zig
        """
        ZIG_TAR = "zig.tar.xz"

        ZIG_DIR = f"{PREFIX}/zig-linux-x86_64-0.8.0-dev.2064+da9da76e3" \
                if dev else f"{PREFIX}/zig-linux-x86_64-0.8.0"

        ZIG_LN = f"{PREFIX}/zig"
        ZIG_BINARIES = ZIG_LN


        if dev:
            utilities.download_file("https://ziglang.org/builds/zig-linux-x86_64-0.8.0-dev.2064+da9da76e3.tar.xz", ZIG_TAR)
        else:
            utilities.download_file("https://ziglang.org/download/0.8.0/zig-linux-x86_64-0.8.0.tar.xz", ZIG_TAR)
        utilities.untar(ZIG_TAR, "xz", PREFIX)
        utilities.symlink(ZIG_DIR, ZIG_LN)
        utilities.export_variable(f"{USER_HOME}/.bashrc", ZIG_BINARIES)


class ZlsInstaller():
    @staticmethod
    def install():
        ZlsInstaller.install_zls()

    @staticmethod
    def install_zls():
        utilities.git_clone("https://github.com/zigtools/zls", "--recurse-submodules")
        try:
            os.chdir("./zls")
            sp.call("zig build -Drelease-safe".split())
            sp.call("./zig-cache/bin/zls config".split())
            destination = f"{PREFIX}/bin"
            if not os.path.isdir(destination):
                os.mkdir(destination)
                shutil.copy("./zls/zig-cache/bin/zls", destination)
        finally:
            os.chdir("..")

def main():
    if not os.path.isdir(PREFIX):
        os.mkdir(PREFIX)
    try:
        if (args.zig):
            ZigInstaller.install()
        if (args.zig_dev):
            ZigInstaller.install(True)
        if (args.zls):
            ZlsInstaller.install()
        if (args.node):
            NodeInstaller.install()
        if (args.rust):
            RustInstaller.install()
    finally:
        download_history.clean()

if __name__ == "__main__":
    main()
