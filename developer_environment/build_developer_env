#!/usr/bin/python3

import os
import subprocess as sp
import shutil
from utils import History, Utilities
from config import *

download_history = History()
utilities = Utilities(download_history)

class NodeInstaller():
    @staticmethod
    def install():
        NodeInstaller.__install_nvm()

    @staticmethod
    def __install_nvm():
        utilities.download_and_execute(f"https://raw.githubusercontent.com/nvm-sh/nvm/v{NVM_VERSION}/install.sh", "bash")

class RustInstaller():
    @staticmethod
    def install():
        """
        Install rust
        """
        filename = "rustup-init.sh"
        utilities.download_file("https://sh.rustup.rs", filename)
        sp.call(f"bash {filename}".split())

class ZigInstaller():
    def __init__(self):
        pass

    @staticmethod
    def install():
        ZigInstaller.install_zig()
        ZigInstaller.install_zls()

    @staticmethod
    def install_zig():
        """
        Install zig
        """
        ZIG_TAR = "zig.tar.xz"
        ZIG_DIR = f"{PREFIX}/zig-linux-x86_64-0.8.0-dev.2064+da9da76e3"
        ZIG_LN = f"{PREFIX}/zig"
        ZIG_BINARIES = ZIG_LN

        utilities.download_file("https://ziglang.org/builds/zig-linux-x86_64-0.8.0-dev.2064+da9da76e3.tar.xz", ZIG_TAR)
        utilities.untar(ZIG_TAR, "xz", PREFIX)
        utilities.symlink(ZIG_DIR, ZIG_LN)
        utilities.export_variable(f"{USER_HOME}/.bashrc", ZIG_BINARIES)

    @staticmethod
    def install_zls():
        utilities.git_clone("https://github.com/zigtools/zls", "--recurse-submodules")
        sp.call("./zls/zig build -Drelease-safe".split())
        sp.call("./zls/zig-cache/bin/zls config".split())
        destination = f"{PREFIX}/bin"
        if not os.path.isdir(destination):
            os.mkdir(destination)
            shutil.copy("./zls/zig-cache/bin/zls", destination)

if __name__ == "__main__":
    if not os.path.isdir(PREFIX):
        os.mkdir(PREFIX)
    try:
        #ZigInstaller.install()
        NodeInstaller.install()
        RustInstaller.install()
    finally:
        download_history.clean()
